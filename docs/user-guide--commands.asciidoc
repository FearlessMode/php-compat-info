ifndef::basebackend-docbook[]

= User Guide
:description: The Command-Line Interface
include::revision.asciidoc[]
include::attributes.asciidoc[]

endif::basebackend-docbook[]

== The Command-Line

[role="lead"]
The command-line interface is the easiest way to try and learn the basic CompatInfo features.

NOTE: For all users.


=== Command-Line Options

Without +plugins+ and +analysers+ sections in your `phpcompatinfo.json` configuration file,
when you invoke the `phpcompatinfo` command, you should obtain the following commands and options :

[role="output"]
====
----
        _            ____                            _   ___        __
  _ __ | |__  _ __  / ___|___  _ __ ___  _ __   __ _| |_|_ _|_ __  / _| ___
 | '_ \| '_ \| '_ \| |   / _ \| '_ ` _ \| '_ \ / _` | __|| || '_ \| |_ / _ \
 | |_) | | | | |_) | |__| (_) | | | | | | |_) | (_| | |_ | || | | |  _| (_) |
 | .__/|_| |_| .__/ \____\___/|_| |_| |_| .__/ \__,_|\__|___|_| |_|_|  \___/
 |_|         |_|                        |_|

phpCompatInfo version 4.0.0-RC1 DB built Mar 04 2015 08:36:07 CET

Usage:
 [options] command [arguments]

Options:
 --help (-h)           Display this help message
 --quiet (-q)          Do not output any message
 --verbose (-v|vv|vvv) Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
 --version (-V)        Display this application version
 --ansi                Force ANSI output
 --no-ansi             Disable ANSI output
 --no-interaction (-n) Do not ask any interactive question
 --no-plugins          Disables all plugins.
 --profile             Display timing and memory usage information.
 --progress            Show progress bar.
 --output              Write results to file or URL.
 --manifest            Show which versions of dependencies are bundled.

Available commands:
 help                  Displays help for a command
 list                  Lists commands
analyser
 analyser:list         List all analysers available.
 analyser:run          Analyse a data source and display results.
cache
 cache:clear           Clear cache (any adapter and backend).
config
 config:validate       Validates a JSON configuration file.
plugin
 plugin:list           List all plugins installed.
reference
 reference:list        List all references supported.
 reference:show        Show information about a reference.
reflection
 reflection:class      Reports information about a user class present in a data source.
 reflection:function   Reports information about a user function present in a data source.
----
====

[horizontal]
config:validate::
Validates an optional JSON config file.
+
[source,bash]
----
$ phpcompatinfo config:validate
----
+
[role="output"]
----
"/etc/phpcompatinfo.json" config file is valid.
----

[horizontal]
plugin:list::
List all plugins configured (and correctly installed) in `plugins` section of your `phpcompatinfo.json` config file.
+
[source,bash]
.Without plugins, you will get
----
$ phpcompatinfo plugin:list
----
+
[role="output"]
----
No plugin installed.
----
+
[source,bash]
.With only `Cache` plugin configured, you will get
----
$ phpcompatinfo plugin:list
----
+
[role="output"]
----
 Plugin Class                           Events Subscribed
 Bartlett\Reflect\Plugin\CachePlugin    reflect.progress
                                        reflect.success
                                        reflect.complete
----

[horizontal]
analyser:list::
List all analysers configured in `analysers` section of your `phpcompatinfo.json` config file,
and available by default.
+
[source,bash]
.With only default analysers, you will get
----
$ phpcompatinfo analyser:list
----
+
[role="output"]
----
 Analyser Name Analyser Class
 loc           Bartlett\Reflect\Analyser\LocAnalyser
 reflection    Bartlett\Reflect\Analyser\ReflectionAnalyser
 structure     Bartlett\Reflect\Analyser\StructureAnalyser
 compatibility Bartlett\CompatInfo\Analyser\CompatibilityAnalyser
----
+
analyser:run::
Parse a data source and display results. May vary depending of the data source and analyser used.
+
[source,bash]
.With `compatibility` analyser and the CompatInfo source code, you will get something like
----
$ phpcompatinfo analyser:run .
----
+
[source,bash]
.Possible alternative (if you use the default json config file)
----
$ phpcompatinfo analyser:run --alias current
----
+
[role="output"]
----
include::compatibility_analysis.out.asciidoc[]
----

[horizontal]
reflection:class::
Reports information about a user class present in a data source.
+
[source,bash]
.With the CompatInfo source code (`./src`), and `Bartlett\CompatInfo\Environment` class
----
$ phpcompatinfo reflection:class Bartlett\CompatInfo\Environment ./src
----
+
[role="output"]
----
include::reflection_class.out.asciidoc[]
----


== Summary

[role="lead"]
Let's review what we've learned about the command-line interface :

* It's a Symfony http://symfony.com/doc/current/components/console/index.html[Console Component] that can be extended to infinite via plugins and analysers.
* You can examine inside a reference and filters elements.

ifdef::basebackend-bootstrap[]
== Next

[role="lead"]
For PHP developers only.

************************************************
.Read more

* Want to learn more about [label label-primary]#CompatInfo# architecture and /or
you want to extends it to match your needs,
have a look on link:developer-guide.html[developer's guide].

************************************************
endif::basebackend-bootstrap[]
