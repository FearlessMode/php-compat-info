= Quick Start
:description: This quick start is a five minute tutorial where you can discover how to identify a data source.
:jumbotron:
:icons!:
:iconsfont: font-awesome
:iconsfontdir: ./fonts/font-awesome
include::revision.asciidoc[]
include::attributes.asciidoc[]


== Data Source Identification

[role="lead"]
Identify the Data Source with Symfony http://symfony.com/doc/current/components/finder.html[Finder].

WARNING: Now, and for the following chapters, we will not mention how you load the classes.
See the strategy you've adopted in the link:setup.html#autoloaders[Setup] chapter.

CAUTION: [label label-primary]#CompatInfo# and Reflect share the same data source provider strategy.

[label label-primary]#CompatInfo# offers a data source provider mechanism.
You may either use the basic Symfony Finder, what we will do next, or use your own.

[source,php]
.Basic Provider with Symfony Finder
----
<?php

use Bartlett\Reflect\Provider\SymfonyFinderProvider;
use Symfony\Component\Finder\Finder;

$dirs = dirname(__DIR__) . '/sources';

$finder = new Finder();
$finder->files()
    ->name('*.php')
    ->in($dirs);

$provider = new SymfonyFinderProvider($finder);
----

At this step, we have created a data source provider that is allowed to retrieve each element to analyse.

[label label-primary]#CompatInfo# need to know it. We attach then the previous provider instance
to a *Provider Manager*, with a label ( e.g: _Single_ ) to identify it easily.

[source,php]
.Provider Manager with a unique data source
----
<?php

use Bartlett\Reflect\ProviderManager;

$pm = new ProviderManager;
$pm->set('Single', $provider);
----

A *Provider Manager* may provide one or more data source identifications.
Here are another example with multiple data sources.

[source,php]
.Provider Manager with multiple data sources
----
<?php

use Bartlett\Reflect\ProviderManager;
use Bartlett\Reflect\Provider\SymfonyFinderProvider;
use Symfony\Component\Finder\Finder;

$pm = new ProviderManager;

// -- source 1
$source1 = dirname(__DIR__) . '/sources/';

$finder1 = new Finder();
$finder1->files()
    ->name('sample1.php')
    ->in($source1);

$pm->set('Sample', new SymfonyFinderProvider($finder1));

// -- source 2
$pharFile = dirname(__DIR__) . '/sources/pirus.phar';
$source2  = 'phar://' . $pharFile;

$finder2 = new Finder();
$finder2->files()
    ->path('/Pirus/')
    ->name('*.php')
    ->in($source2);

$pm->set('Pirus', new SymfonyFinderProvider($finder2));
----

On this example [label label-primary]#CompatInfo# is able to analyse contents
of two data sources: _Sample_ and _Pirus_, all at once (default behavior) or individually.

== Analyse elements of the provider

We reuse the provider manager instance (+$pm+) seen above (unique data source named _Single_ ).
Then we ask [label label-primary]#CompatInfo# to analyse its full contents.

[source,php]
----
<?php

use Bartlett\CompatInfo;

$compatinfo = new CompatInfo;
$compatinfo->setProviderManager($pm);
$compatinfo->parse();
----

In case of multiple data sources, when you want to parse it individually rather than fully,
use the following statements.

[source,php]
.Analyse only Data Source #2
----
<?php

use Bartlett\CompatInfo;

$compatinfo = new CompatInfo;
$compatinfo->setProviderManager($pm);
$compatinfo->parse(array('Pirus'));
----
_Pirus_ is the data source label used on +$pm->set()+ statement.

You have identified data sources and analyse its full contents.
Now you are ready to handle the results.

************************************************
*To be continued ...* on stable version 3.1
************************************************
